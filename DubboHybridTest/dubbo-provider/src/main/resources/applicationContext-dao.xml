<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 数据库连接池 -->
	<bean id="dataSourceDbcp" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${mysql.driverClassName}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<property name="maxActive" value="10" />
		<property name="maxIdle" value="5" />
	</bean>

    <!--hikariCp-->
    <bean id="dataSourceHikari" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="${mysql.driverClassName}"/>
                <property name="jdbcUrl" value="${mysql.url}"/>
                <property name="username" value="${mysql.username}"/>
                <property name="password" value="${mysql.password}"/>
                <property name="connectionTestQuery" value="select 1"/>
                <property name="connectionTimeout" value="30000"/>
                <property name="idleTimeout" value="3000"/>
                <property name="maxLifetime" value="300000"/>
                <property name="maximumPoolSize" value="2"/>
                <property name="minimumIdle" value="1"/>
            </bean>
        </constructor-arg>
    </bean>


    <bean id="dataSourceC3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${mysql.driverClassName}" />
        <property name="jdbcUrl" value="${mysql.url}" />
        <property name="user" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
    </bean>


    <!-- 动态数据源配置 -->
    <bean id="dataSource" class="com.tingyun.util.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSourceDbcp" value-ref="dataSourceDbcp"></entry>
                <entry key="dataSourceC3p0" value-ref="dataSourceC3p0"></entry>
                <entry key="dataSourceHikari" value-ref="dataSourceHikari"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceDbcp"></property>
    </bean>

    <!-- SqlsessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
        <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。
             *是个通配符，代表所有的文件，**代表所有目录下 -->
        <property name="mapperLocations" value="classpath:mybatis/mapperXml/*.xml" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tingyun.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事物管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />

            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- spring aop事物管理 -->
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.tingyun.service.imp.MySQL*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" order="2"/>
    </aop:config>

    <!-- 数据源动态切换实体 -->
    <bean id="dataSourceInterceptor" class="com.tingyun.util.DynamicDataSourceInterceptor"/>

    <!-- 数据源动态切换切面配置 -->
    <aop:config>
        <!-- 配置切点表达式 -->
        <aop:pointcut id="pointcutDbcp" expression="execution(* com.tingyun.service.imp.MySQLDbcpServiceImpl.*(..))"/>
        <aop:pointcut id="pointcutC3p0" expression="execution(* com.tingyun.service.imp.MySQLC3p0ServiceImpl.*(..))"/>
        <aop:pointcut id="pointcutHikari" expression="execution(* com.tingyun.service.imp.MySQLHikariServiceImpl.*(..))"/>

        <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor" order="1">
            <!-- 拦截所有service实现类的方法 -->
            <aop:before pointcut-ref="pointcutDbcp" method="setDS1" />
            <aop:before pointcut-ref="pointcutC3p0" method="setDS2" />
            <aop:before pointcut-ref="pointcutHikari" method="setDS3" />
        </aop:aspect>
    </aop:config>



</beans>